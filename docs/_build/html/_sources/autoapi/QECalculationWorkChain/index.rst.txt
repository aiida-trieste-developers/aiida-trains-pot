QECalculationWorkChain
======================

.. py:module:: QECalculationWorkChain

.. autoapi-nested-parse::

   Equation of State WorkChain.



Attributes
----------

.. autoapisummary::

   QECalculationWorkChain.PwBaseWorkChain
   QECalculationWorkChain.StructureData
   QECalculationWorkChain.TrajectoryData
   QECalculationWorkChain.SinglefileData


Classes
-------

.. autoapisummary::

   QECalculationWorkChain.QECalculationWorkChain


Functions
---------

.. autoapisummary::

   QECalculationWorkChain.WriteDataset


Module Contents
---------------

.. py:data:: PwBaseWorkChain

.. py:data:: StructureData

.. py:data:: TrajectoryData

.. py:data:: SinglefileData

.. py:function:: WriteDataset(**params)

   Calculation function to write a dataset to a file

   :param structures: A list of AiiDA `StructureData` nodes


.. py:class:: QECalculationWorkChain(inputs: dict | None = None, logger: logging.Logger | None = None, runner: aiida.engine.runners.Runner | None = None, enable_persistence: bool = True)

   Bases: :py:obj:`aiida_quantumespresso.workflows.protocols.utils.ProtocolMixin`, :py:obj:`aiida.engine.WorkChain`


   WorkChain to generate a training dataset for a given structure using Quantum ESPRESSO.


   .. py:method:: define(spec)
      :classmethod:


      Specify inputs and outputs.



   .. py:method:: get_builder_from_protocol(code, structure_list, pseudos=None, core_hole_treatments=None, protocol=None, overrides=None, elements_list=None, atoms_list=None, options=None, structure_preparation_settings=None, correction_energies=None, **kwargs)
      :classmethod:


      Return a builder prepopulated with inputs selected according to the chosen protocol.

      :param code: the ``Code`` instance configured for the ``quantumespresso.pw`` plugin.
      :param structure: the ``StructureData`` instance to use.
      :param pseudos: the core-hole pseudopotential pairs (ground-state and
                      excited-state) for the elements to be calculated. These must
                      use the mapping of {"element" : {"core_hole" : <upf>, "gipaw" : <upf>}}
      :param protocol: the protocol to use. If not specified, the default will be used.
      :param overrides: optional dictionary of inputs to override the defaults of the
                        XpsWorkChain itself.
      :param kwargs: additional keyword arguments that will be passed to the
          ``get_builder_from_protocol`` of all the sub processes that are called by this
          workchain.
      :return: a process builder instance with all inputs defined ready for launch.



   .. py:method:: _run_rattle_and_submit(structure)


   .. py:method:: run_rattle_qe()

      Run calculations for dataset generation.



   .. py:method:: results()

      Process results.



   .. py:method:: finalize()

      Finalize.



   .. py:method:: error_check()

      Check for errors.



